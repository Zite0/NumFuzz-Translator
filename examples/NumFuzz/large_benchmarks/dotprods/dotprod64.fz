#include "../combines/combine64.fz"
#include "../maps/map64_prod.fz"
#include "../../float_ops/mulfp64.fz"
#include "../../float_ops/addfp64.fz"
#include "../folds/fold64.fz" 

function dotprod64
  (a :   (num, (num, (num, (num, (num, (num, (num, (num, (num, (num, 
          (num, (num, (num, (num, (num, (num, (num, (num, (num, (num,
          (num, (num, (num, (num, (num, (num, (num, (num, (num, (num,
          (num, (num, (num, (num, (num, (num, (num, (num, (num, (num,
          (num, (num, (num, (num, (num, (num, (num, (num, (num, (num,
          (num, (num, (num, (num, (num, (num, (num, (num, (num, (num,
          (num, (num, (num, num))))))))))))))))))))))))))))))))))))))
          ))))))))))))))))))))))))))
  (b :   (num, (num, (num, (num, (num, (num, (num, (num, (num, (num, 
          (num, (num, (num, (num, (num, (num, (num, (num, (num, (num,
          (num, (num, (num, (num, (num, (num, (num, (num, (num, (num,
          (num, (num, (num, (num, (num, (num, (num, (num, (num, (num,
          (num, (num, (num, (num, (num, (num, (num, (num, (num, (num,
          (num, (num, (num, (num, (num, (num, (num, (num, (num, (num,
          (num, (num, (num, num))))))))))))))))))))))))))))))))))))))
          ))))))))))))))))))))))))))
{
 v = combine64 a b  ;
 v' = map64_prod v [mulfp64{64.0}] ;

let (a0', as1) = v';
let (a1', as2)= as1;
let (a2', as3)= as2;
let (a3', as4)= as3;
let (a4', as5)= as4;
let (a5', as6)= as5;
let (a6', as7)= as6;
let (a7', as8)= as7;
let (a8', as9)= as8;
let (a9', as10)= as9;
let (a10', as11)= as10;
let (a11', as12)= as11;
let (a12', as13)= as12;
let (a13', as14)= as13;
let (a14', as15)= as14;
let (a15', as16)= as15;
let (a16', as17)= as16;
let (a17', as18)= as17;
let (a18', as19)= as18;
let (a19', as20)= as19;
let (a20', as21)= as20;
let (a21', as22)= as21;
let (a22', as23)= as22;
let (a23', as24)= as23;
let (a24', as25)= as24;
let (a25', as26)= as25;
let (a26', as27)= as26;
let (a27', as28)= as27;
let (a28', as29)= as28;
let (a29', as30)= as29;
let (a30', as31)= as30;
let (a31', as32)= as31;
let (a32', as33)= as32;
let (a33', as34)= as33;
let (a34', as35)= as34;
let (a35', as36)= as35;
let (a36', as37)= as36;
let (a37', as38)= as37;
let (a38', as39)= as38;
let (a39', as40)= as39;
let (a40', as41)= as40;
let (a41', as42)= as41;
let (a42', as43)= as42;
let (a43', as44)= as43;
let (a44', as45)= as44;
let (a45', as46)= as45;
let (a46', as47)= as46;
let (a47', as48)= as47;
let (a48', as49)= as48;
let (a49', as50)= as49;
let (a50', as51)= as50;
let (a51', as52)= as51;
let (a52', as53)= as52;
let (a53', as54)= as53;
let (a54', as55)= as54;
let (a55', as56)= as55;
let (a56', as57)= as56;
let (a57', as58)= as57;
let (a58', as59)= as58;
let (a59', as60)= as59;
let (a60', as61)= as60;
let (a61', as62)= as61;
let (a62', a63')= as62;

let a0 = a0';
let a1 = a1';
let a2 = a2';
let a3 = a3';
let a4 = a4';
let a5 = a5';
let a6 = a6';
let a7 = a7';
let a8 = a8';
let a9 = a9';
let a10 = a10';
let a11 = a11';
let a12 = a12';
let a13 = a13';
let a14 = a14';
let a15 = a15';
let a16 = a16';
let a17 = a17';
let a18 = a18';
let a19 = a19';
let a20 = a20';
let a21 = a21';
let a22 = a22';
let a23 = a23';
let a24 = a24';
let a25 = a25';
let a26 = a26';
let a27 = a27';
let a28 = a28';
let a29 = a29';
let a30 = a30';
let a31 = a31';
let a32 = a32';
let a33 = a33';
let a34 = a34';
let a35 = a35';
let a36 = a36';
let a37 = a37';
let a38 = a38';
let a39 = a39';
let a40 = a40';
let a41 = a41';
let a42 = a42';
let a43 = a43';
let a44 = a44';
let a45 = a45';
let a46 = a46';
let a47 = a47';
let a48 = a48';
let a49 = a49';
let a50 = a50';
let a51 = a51';
let a52 = a52';
let a53 = a53';
let a54 = a54';
let a55 = a55';
let a56 = a56';
let a57 = a57';
let a58 = a58';
let a59 = a59';
let a60 = a60';
let a61 = a61';
let a62 = a62';
let a63 = a63';

 v1 = (a0, (a1, (a2, (a3, (a4, (a5, (a6, (a7, (a8, (a9, (a10, (a11, (a12, (a13, (a14, (a15, (a16, (a17, (a18, (a19, (a20, (a21, (a22, (a23, (a24, (a25, (a26, (a27, (a28, (a29, (a30, (a31, (a32, (a33, (a34, (a35, (a36, (a37, (a38, (a39, (a40, (a41, (a42, (a43, (a44, (a45, (a46, (a47, (a48, (a49, (a50, (a51, (a52, (a53, (a54, (a55, (a56, (a57, (a58, (a59, (a60, (a61, (a62, a63)))))))))))))))))))))))))))))))))))))))))))
 ))))))))))))))))))));

 g = fun (x: num) {fun (y: num) {addfp64 <x,y>}};
 fold64 v1 [g{63.0}] 
}
