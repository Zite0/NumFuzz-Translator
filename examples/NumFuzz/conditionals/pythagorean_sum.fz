#include "../float_ops/addfp64.fz"
#include "../float_ops/sqrtfp64.fz"
#include "../float_ops/divfp64.fz"
#include "../float_ops/pow2_64.fz"
#include "min.fz"
#include "max.fz"
#include "band.fz"

/* The Pythagorean sum to reduce overflow and underflow.
  Ref: "Numerical Methods in Scientific Computing, VOLUME 1".
        Dahlquist and Bjorck. Siam. 2008. page 119.
*/

function pythagorean_sum (a : num) (b : num) {
    b1 = eq (a,0.0); 
    b2 = eq (b,0.0); 
    b3 = band b1 b2;
    if b3 then { 
        ret 0.0
    } 
    else { 
        p = max a b;
        q = min a b;
        rho' = divfp64 (q,p);
        let rho = rho';
        s = pow2_64 rho;
        let s0 = s; 
        s1 = addfp64 <1.0,s0>;
        let s2 = s1; 
        s3 = sqrtfp64 s2;
        let s4 = s3;             
        mulfp64 (p,s4)
    }
}

pythagorean_sum
